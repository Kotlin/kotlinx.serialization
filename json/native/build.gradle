apply plugin: 'konan'

def deployMode = property('native.deploy') == 'true'

if (deployMode) {
    konan.targets = ["macos_x64", "ios_arm64", "ios_x64"]
}

konanArtifacts {
    library('jsonparser') {
        enableMultiplatform true
        srcDir 'src'
        srcDir project(':jsonparser').file('src')
    }

    if (!deployMode) {
        program('jsonparser-test') {
            srcDir 'src'
            srcDir project(':jsonparser').file('src')

            srcDir project(':jsonparser').file('test')

            extraOpts '-tr', '-Xmulti-platform'
        }
    }
}

task test(dependsOn: run)

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

def localMavenRepo = "file://${new File(System.properties['user.home'] as String)}/.m2-kotlin-native"
def remoteBintrayRepo ="https://dl.bintray.com/sandwwraith/generic/native-libs"

publishing {
    repositories {
        maven {
            if (deployMode) {
                url = remoteBintrayRepo
            } else {
                url = localMavenRepo
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    pkg {
        userOrg = 'sandwwraith'
        repo = 'generic'
        name = "native-libs"
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/Kotlin/kotlinx.serialization'
    }
}

bintrayUpload.doFirst {
    publications = project.publishing.publications
}
