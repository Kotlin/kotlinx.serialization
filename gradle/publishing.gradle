import org.gradle.util.VersionNumber

/*
 * Copyright 2017-2021 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license.
 */

// Configures publishing of Maven artifacts to Bintray

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

apply from: project.rootProject.file('gradle/maven-metadata.gradle')

def isMultiplatform = project.name in ["kotlinx-serialization-core", "kotlinx-serialization-json","kotlinx-serialization-protobuf",
                                       "kotlinx-serialization-cbor", "kotlinx-serialization-properties"]

def isKotlin137x = VersionNumber.parse(kotlin_version) <= VersionNumber.parse("1.3.79")

task stubSources(type: Jar) {
    archiveClassifier = 'sources'
}

task stubJavadoc(type: Jar) {
    archiveClassifier = 'javadoc'
}

task emptyJar(type: Jar) {
}

def bintrayUploadFlag = System.getenv("libs.bintray.upload") != null

afterEvaluate {
    task mainSourcesJar(type: Jar) {
        classifier = 'sources'
        if (isMultiplatform) {
            from kotlin.sourceSets.commonMain.kotlin
        } else {
            from sourceSets.main.allSource
        }
    }
}

afterEvaluate {
    publishing {
        def variantName = "${project.name}"

        if (!isMultiplatform) {
            publications {
                maven(MavenPublication) { publication ->
                    artifactId variantName
                    publication.from components.java
                    publication.artifact mainSourcesJar
                    artifact stubJavadoc

                    PublishingKt.configureMavenCentralMetadata(publication.pom, project)
                    if (!bintrayUploadFlag) {
                        PublishingKt.signPublicationIfKeyPresent(project, publication)
                    }
                }
            }

            if (isKotlin137x) {
                disableMetadataPublicationKotlinJvm()
            }

            return
        }

        // Rename artifacts for backward compatibility
        publications.all {
            def type = it.name
            logger.info("Configuring $type")
            switch (type) {
                case 'kotlinMultiplatform':
                    if (isKotlin137x) {
                        it.artifactId = "$variantName-native"
                        it.artifact sourcesJar
                    } else {
                        // With Kotlin 1.4.0, the root module ID has no suffix, but for compatibility with
                        // the consumers who can't read Gradle module metadata, we publish the JVM artifacts in it
                        it.artifactId = variantName
                        apply from: "$rootDir/gradle/publish-mpp-root-module-in-platform.gradle"
                        publishPlatformArtifactsInRootModule(publications["jvm"])
                    }
                    break

                case 'metadata':
                    it.artifactId = isKotlin137x ? "$variantName-common" : "$variantName-metadata"
                    break

                case 'jvm':
                    it.artifactId = isKotlin137x ? "$variantName" : "$variantName-jvm"
                    break

                case 'js':
                    it.artifactId = "$variantName-$type"
                    break
            }
            logger.info("Artifact id = ${it.artifactId}")

            PublishingKt.configureMavenCentralMetadata(pom, project)
            if (!bintrayUploadFlag) {
                PublishingKt.signPublicationIfKeyPresent(project, it)
            }

            // The 'root' module publishes the JVM module's Javadoc JAR as per publishPlatformArtifactsInRootModule, and
            // every other module should publish an empty Javadoc JAR. TODO: provide proper documentation artifacts?
            if (name != "kotlinMultiplatform")
                artifact stubJavadoc
        }

        if (isKotlin137x) {
            disableMetadataPublication()
        }
    }
}

publishing {
    repositories {
        if (bintrayUploadFlag) {
            PublishingKt.configureBintrayPublication(delegate, project)
        } else {
            PublishingKt.configureMavenPublication(delegate, project)
        }
    }
}

// Compatibility with old TeamCity configurations that perform :kotlinx-coroutines-core:bintrayUpload
task bintrayUpload(dependsOn: publish)

// This is required for K/N publishing
bintrayUpload.dependsOn publishToMavenLocal

private void disableMetadataPublicationKotlinJvm() {
    publishing.publications.each { pub ->
        pub.moduleDescriptorGenerator = null
        tasks.matching { it.name == "generateMetadataFileFor${pub.name.capitalize()}Publication" }.all {
            onlyIf { false }
        }
    }
}

private void disableMetadataPublication() {
    kotlin.targets.all { target ->
        def publication = publishing.publications.findByName(target.name)

        if (publication != null) {
            if (target.platformType.name != 'native' && target.platformType.name != 'js') {
                publication.moduleDescriptorGenerator = null
                tasks.matching { it.name == "generateMetadataFileFor${name.capitalize()}Publication" }.all {
                    onlyIf { false }
                }
            }
        }
    }
}
